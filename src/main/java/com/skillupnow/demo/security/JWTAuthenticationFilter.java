package com.skillupnow.demo.security;

import com.auth0.jwt.JWT;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.skillupnow.demo.exception.RestErrorResponse;
import com.skillupnow.demo.exception.SkillUpNowException;
import com.skillupnow.demo.model.po.User;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

public class JWTAuthenticationFilter extends UsernamePasswordAuthenticationFilter {

  private AuthenticationManager authenticationManager;

  public JWTAuthenticationFilter(AuthenticationManager authenticationManager) {
    this.authenticationManager = authenticationManager;

    setFilterProcessesUrl(SecurityConstants.LOG_IN_URL);
    setPostOnly(true);
  }

  @Override
  public Authentication attemptAuthentication(HttpServletRequest request,
      HttpServletResponse response) throws AuthenticationException {
    try {
      // parse user from request
      User credentials = new ObjectMapper().readValue(request.getInputStream(), User.class);

      // check username and password
      return authenticationManager.authenticate(
          new UsernamePasswordAuthenticationToken(credentials.getUsername(),
              credentials.getPassword(), new ArrayList<>()));
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  @Override
  protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,
      FilterChain chain, Authentication authResult) throws IOException, ServletException {
    /* upon successful authentication, generate a JWT token for the user and add it to the response */

    // get user roles and write into JWT token
    org.springframework.security.core.userdetails.User user =
        (org.springframework.security.core.userdetails.User) authResult.getPrincipal();
    List<String> roles = user.getAuthorities().stream()
        .map(GrantedAuthority::getAuthority)
        .collect(Collectors.toList());

    /*
      Three main parts to be defined for a JWT token
      1. payload (a.k.a claims): username, user roles, expiration time
      2. header: algorithm, type (e.g. JWT)
      3. signature is generated by using the header, payload and a secret
      (i.e. SecurityConstants.SECRET) residing on the server only.
    */
    String token = JWT.create().withSubject(user.getUsername())
        .withClaim("roles",  String.join(",", roles))
        .withExpiresAt(new Date(System.currentTimeMillis() + SecurityConstants.EXPIRATION_TIME))
        .sign(com.auth0.jwt.algorithms.Algorithm.HMAC512(SecurityConstants.SECRET.getBytes()));

    // add token to response header
    response.setHeader(SecurityConstants.HEADER_STRING, SecurityConstants.TOKEN_PREFIX + token);
    response.setHeader("role", String.join(",", roles));
  }

  @Override
  protected void unsuccessfulAuthentication(HttpServletRequest request,
      HttpServletResponse response, AuthenticationException failed)
      throws IOException {
    String errorMessage;
    HttpStatus status;
    if (failed instanceof BadCredentialsException) {
      errorMessage = "Invalid username or password";
      status = HttpStatus.UNAUTHORIZED;
    } else {
      errorMessage = "Authentication failed";
      status = HttpStatus.INTERNAL_SERVER_ERROR;
    }
    RestErrorResponse errorResponse = new RestErrorResponse(errorMessage);
    response.setStatus(status.value());
    response.setContentType(MediaType.APPLICATION_JSON_VALUE);
    response.getWriter().write(new ObjectMapper().writeValueAsString(errorResponse));
  }

}
